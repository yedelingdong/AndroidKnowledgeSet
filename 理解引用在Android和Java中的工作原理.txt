彻底理解引用在 Android 和 Java 中的工作原理
https://medium.com/google-developer-experts/finally-understanding-how-references-work-in-android-and-java-26a0d9c92f83#.x1m4ykp6m

[译] 彻底理解引用在 Android 和 Java 中的工作原理
https://zhuanlan.zhihu.com/p/24344559

创建SoftReferenceCache
http://peters-andoird-blog.blogspot.com/2012/05/softreference-cache.html

创建虚引用
https://blog.csdn.net/Xp545945/article/details/96481550

题目：
移动设备中内存的工作原理，内存泄漏是如何发生的，为什么这个是重要的，以及我们可以应用哪些技术来避开它们。
因为我从开发 Android 起，就常常看到这么种倾向：轻视甚至无视一切与内存泄漏和内存管理相关的问题。已经满足开发需求了，
为何要庸人自扰呢？我们总是急于开发新的功能，我们宁愿在下一个斯普林特演示中呈现一些可见的东西，也不会关心那些没有人一眼就能看到的东西。

不同类型的内存引用，它们具体是什么，以及如何在 Android 中使用？

首先：Java 中的引用是什么？
引用指向了一个对象，你能通过引用访问对象。

Java 默认有 4 种类型的引用：
强引用（StrongReference）、软引用（SoftReference）、弱引用（WeakReference） 和 虚引用（PhantomReference）。

各种引用都是什么意思？


StrongReference： 强引用是 Java 中最为常见的引用类型。任何时候，当我们创建了一个对象，强引用也同时被创建了。比如，当我们这么做：
MyObject object = new MyObject();
一个新的 MyObject 对象被创建，指向它的强引用保存在 object 中。
这个 object 是可以强行到达的——意思就是，它可以通过一系列强引用找到，这将会阻止垃圾回收机制回收它，然而，这正是是我们最想要的。现在，我们来看个例子。
public class MainActivity extends Activity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {   
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        new MyAsyncTask().execute();
    }

    private class MyAsyncTask extends AsyncTask {
        @Override
        protected Object doInBackground(Object[] params) {
            return doSomeStuff();
        }
        private Object doSomeStuff() {
            //do something to get result
            return new MyObject();
        } 
    }
}
AsyncTask 对象会在 Activity.onCreate() 方法中创建并运行。但这里有个问题：内部类在它的整个生命周期中是会访问外部类。
如果 Activity 被 destroy 掉时，会发生什么？ AsyncTask 仍然持有 Activity 的引用，所以 Activity 是不能被 GC 回收的。这就是我们所说的内存泄漏。
内存泄漏实际上不仅发生在 Activity 自身销毁的时候，同时还发生在由于配置的改变或需要更多的内存而被系统强行销毁等时刻。
如果 AsyncTask 复杂点（比如，持有 Activity 上的 View 的引用），它甚至会导致崩溃，因为 view 的引用是 null。

Q:Android内部类怎么避免内存泄漏？
A:使用弱引用


WeakReference：弱引用是引用强度不足以将对象保持在内存中的引用。如果垃圾回收机制试图确定对象的引用强度，如果恰好是通过 WeakReferences 引用，那么该对象将被垃圾回收。
用上个例子来说明如何使用 WeakReference 来避免内存泄漏：
public class MainActivity extends Activity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        new MyAsyncTask(this).execute();
     }
    private static class MyAsyncTask extends AsyncTask {
        private WeakReference mainActivity;    

        public MyAsyncTask(MainActivity mainActivity) {   
            this.mainActivity = new WeakReference<>(mainActivity);            
        }
        @Override
        protected Object doInBackground(Object[] params) {
            return doSomeStuff();
        }
        private Object doSomeStuff() {
            //do something to get result
            return new Object();
        }
        @Override
        protected void onPostExecute(Object object) {
            super.onPostExecute(object);
            if (mainActivity.get() != null){
                //adapt contents
            }
        }
    }
}
这样做有什么差别呢？ 当 Activity 不存在时，由于它是被 WeakReference 持有的，可以被收集。 因此，不会发生内存泄漏。
旁注: 它完全就是一个 HashMap，除了使用 WeakReferences 引用键（键，而不是值）。 这使得它们对于实现诸如缓存之类的实体非常有用。

Q:HashMap的使用和原理？
A:Key,Value

Q:java中内部类持有外部类的引用？
A:


SoftReference: 软引用可以作为一个引用强度更强的弱引用。
在弱引用将被立即回收的情形下，软引用会向 GC 请求留在内存中，除非没有其他选项（否则是不会回收软引用持有的对象）。
垃圾回收会这么解说“我会永远收回弱引用。 如果对象是 软引用，我将基于具体条件决定是否回收。”
SoftReference<String> ref = new SoftReference<String>("Hello world");
tring value = ref.get();
if (value == null) {
  // The reference is cleaned up by the Garbage Collector.
  // Initialize the object again.
}
// Use the value (from the SoftReference or from re-initializing.
......

创建一个SoftReferenceCache类:
import java.lang.ref.SoftReference;
import java.util.HashMap;

/**
 * SoftRefenceCache
 * @param <K> The type of the key's.
 * @param <V> The type of the value's.
 */
public class SoftReferenceCache<K, V> {
  private final HashMap<K, SoftReference<V>> mCache;

  public SoftReferenceCache() {
    mCache = new HashMap<K, SoftReference<V>>();
  }

  /**
   * Put a new item in the cache. This item can be gone after a GC run.
   * 
   * @param key
   *            The key of the value.
   * @param value
   *            The value to store.
   */
  public void put(K key, V value) {
    mCache.put(key, new SoftReference<V>(value));
  }

  /**
   * Retrieve a value from the cache (if available).
   * 
   * @param key
   *            The key to look for.
   * @return The value if it's found. Return null if the key-value pair is not
   *         stored yet or the GC has removed the value from memory.
   */
  public V get(K key) {
    V value = null;

    SoftReference<V> reference = mCache.get(key);

    if (reference != null) {
      value = reference.get();
    }

    return value;
  }
}

使用SoftReferenceCache:
SoftReferenceCache<Integer, Person> personCache = new SoftReferenceCache<Integer, Person>();
personCache.put(1,"xiaoming");
personCache.put(2,"xiaofang");

Q:GC回收算法？
A:新生代，SWAP区，老年代


PhantomReference：垃圾收集器能随时回收虚引用 持有的对象。虚引用可以精确地用于检测对象是否已从内存中删除。 
说实话，在我的整个职业生涯中不得不用虚引用的场景只有两次。 所以，即便你现在不是很难理解，也不要感到有压力。
一个phantom reference 引用的对象从创建到被回收会经历哪些事
1.创建对象，以及phantom reference
public static TestObject instanceA = null;
ReferenceQueue<TestObject> queue = new ReferenceQueue<>();
instanceA = new TestObject();   // 创建对象
PhantomReference<TestObject> phantomRef = 
				new PhantomReference<TestObject>(instanceA, queue); //创建phantom引用
2.对象不可达（这里指没有强引用）
instanceA = null; // 对象已经不需要再使用了，可以被回收了
3.对象被GC发现其只有phantom reference引用，检查是否需要执行finalize方法
// GC发现了这个对象可以被回收，如果对象覆盖了finalize方法还需要执行finalize方法
System.gc();

// 对象的finalize方法
protected void finalize() throws Throwable {
	super.finalize();
	System.out.println("finalize method executed");
}
4.对象已经处于finalized状态
5.对象再次被GC发现，认为它是phantom可达对象，将其加入reference的pending链表
6.ReferenceHandler将pending链表表头加入ReferenceQueue
7.手动清除（clear） phantom reference对象成为完全不可达对象（phantom reference 也没有对象的引用）
8.GC发现对象不可达，回收对象所占的空间
